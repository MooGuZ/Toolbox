function kmeansplot(data, record, plotpath, hidefig)
% KMEANSPLOT draw plot for kmeans-clusterring process by given RECORD 
% generated by 'kmeans' methods and save plots to specified PLOTPATH.
%
% See also kmeans.
%
% Morgan Zhu <hzhu@case.edu>

    if not(exist('plotpath', 'var'))
        plotpath = pwd();
    elseif not(isdir(plotpath))
        mkdir(plotpath);
    end
    
    if not(exist('hidefig', 'var'))
        hidefig = false;
    end

    % do PCA analyse for high dimensional data
    if size(data, 1) > 2
        covmat = data * data';
        [V, D] = eig(covmat);
        [~, index] = sort(diag(D), 'descend');
        V = V(:, index);
        encode = V(:, 1:2)';
        pltdata = encode * data;
    else
        pltdata = data;
    end

    % draw plots
    if isscalar(record)
        k = size(record.kernel, 2);
        % get colormap
        cmap = colorspace(k);
        % draw plot
        f = figure(); grid on, hold on
        if hidefig
            set(f, 'visible', 'off');
        end        
        % map kernel to plotting space
        if exist('encode', 'var')
            kernel = encode * record.kernel;
        else
            kernel = record.kernel;
        end
        % draw data points
        for i = 1 : k
            style = dataStyle(i, cmap);
            index = (record.label == i);
            plot(pltdata(1, index), pltdata(2, index), style{:});
        end
        % draw kernels after data point to prevent overlap
        for i = 1 : k
            style = kernelStyle(i, cmap);
            plot(kernel(1, i), kernel(2, i), style{:});
        end
        print(f, '-depsc', fullfile(plotpath, 'kmeansPlot.eps'));
        hold off
        if not(showfig)
            close(f);
        end
    else 
        k = size(record(1).kernel, 2);
        % get colormap
        cmap = colorspace(k);
        % draw each step in the record 
        for j = 1 : numel(record)
            f = figure(); grid on, hold on
            if hidefig
                set(f, 'visible', 'off');
            end
            % map kernel to plotting space
            if exist('encode', 'var')
                kernel = encode * record(j).kernel;
            else
                kernel = record(j).kernel;
            end
            % draw data points
            for i = 1 : k
                style = dataStyle(i, cmap);
                index = (record(j).label == i);
                plot(pltdata(1, index), pltdata(2, index), style{:});
            end
            % draw kernels
            for i = 1 : k
                style = kernelStyle(i, cmap);
                plot(kernel(1, i), kernel(2, i), style{:});
            end
            print(f, '-depsc', fullfile(plotpath, sprintf('kmeansPlot-step%d.eps', j)));
            hold off
            if hidefig
                close(f);
            end
        end
    end
end

function value = dataStyle(i, cmap)
    value = { '.', ...
        'MarkerEdgeColor', cmap(i, :), ...
        'MarkerSize', 10 };
end

function value = kernelStyle(i, cmap)    
    value = { 'o', ...
        'MarkerEdgeColor', 'k', ...
        'MarkerFaceColor', cmap(i, :), ...
        'LineWidth', 1.3, ...
        'MarkerSize', 10 };
end